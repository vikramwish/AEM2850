---
#########################################################
# Steps to complete this homework:
#   1. Add your name to the author field of the yaml header
#   2. Fill in the code chunks and use inline code to answer the questions 
#   3. Click on "Render" directly above to render output (or Ctrl/Cmd-Shift-K)
#   4. Repeat steps 2-3 until you are satisfied with the final product
#   5. Download the resulting file homework-xx.pdf
#   6. Upload homework-xx.pdf to canvas
# Note: this file may not Render properly until it is (partially) completed
# Reminder: to get around this and work interactively, you can run code chunks on their own
# You can do this using keyboard shortcuts, icons in each chunk, or Run at the top right of this pane
#########################################################
title: "Homework Answer - Week 3"
author: "Vikram Viswanath"
date: today
format: pdf
urlcolor: blue
---

```{r setup, include = FALSE}
library(tidyverse)
library(readxl)
library(knitr)        # added for kable
library(kableExtra)   # added for styling tables

# the next line causes the output to omit output from functions like read_csv()
knitr::opts_chunk$set(message = FALSE, warning = FALSE)
```

## Preface

Starlink is a satellite network designed to provide internet to remote and underserved areas. Operated by the company SpaceX, it is comprised of a "constellation" of satellites orbiting the Earth at lower altitude than conventional internet satellites, removing the need for large infrastructure on the ground to receive the signal [(CNET, 2022)](https://www.cnet.com/home/internet/starlink-satellite-internet-explained/). In Jul. 2023, there were over 4,500 Starlink satellites orbiting the planet --- each about the size of a sofa --- with plans of bringing this number up to 42,000 in the coming years [(The New York Times, 2023)](https://www.nytimes.com/interactive/2023/07/28/business/starlink.html).

In 2021, the Brazilian government started a dialogue with SpaceX to increase internet provision in remote areas of Brazil, particularly in the Amazon region [(Business Insider, 2021)](https://www.businessinsider.com/elon-musk-met-brazil-government-spacex-starlink-internet-amazon-rainforest-2021-11). SpaceX was eventually authorized to provide Starlink internet in 2022 [(Valor International, 2022)](https://valorinternational.globo.com/business/news/2022/01/30/elon-musks-starlink-gets-greenlight-from-brazils-telecoms-regulator.ghtml).

In this assignment, we will use R to investigate whether the plan of increasing access in remote areas of Brazil is coming along or not. The goal is to help you gain more familiarity with data import, tidy data, and relational data. In this homework we will continue providing some code snippets to serve as "scaffolding" to help guide you through each step. Over the course of the semester we will provide less scaffolding and more open-ended questions. As always, please come to office hours and reach out to your teaching staff if you have any questions.

We will work with two data sets:

1. **Internet access in Brazil (2022-2024).xlsx**, constructed with data found from the Brazilian regulatory agency for telecommunications [(source)](https://dados.gov.br/dados/conjuntos-dados/acessos---banda-larga-fixa). It measures Internet access by counting the number of fixed connections to the Internet for each month from Jan. 2022 to Dec. 2024. Counts are broken down by state, provider, type of area within the state, and whether the area is considered remote or not.

2. **brazil_regions.csv**, which identifies which of the 5 regions each of the 27 Brazilian states is located in. In this data set, each column represents a state, and each row, a region. A cell containing the number 1 indicates that the state is located in that region; conversely, the number 0 means that the state is not located in that region.


<!--- Please leave the code above unchanged. Questions start from here. --->

{{< pagebreak >}}

## 1. Import `Internet access in Brazil (2022-2024).xlsx` and assign it to a new object named `access`. You may need to specify the range of cells in the spreadsheet that should be imported. We'll consider the level of observation to be a state-year-month.

## Based on what we saw in class, is this data frame "tidy"? Why or why not? Also, look at the column types (character, double, etc.); do they seem appropriate given the type of information contained in each one?
<!-- Tip: Open this file with a spreadsheet editor (such as Excel or Google Sheets) and inspect which cells contain information that matches the "rectangular" data.frame structure. Those are the ones you should import, ignoring everything else the spreadsheet may contain. -->

``` {r echo = TRUE}
access <- read_excel("Internet access in Brazil (2022-2024).xlsx", skip = 5)

glimpse(access)
```

This data set is not tidy because it has multiple columns for year-month combinations (like "202201", "202202", etc.) which should be pivoted into rows.

No, the column types do not seem appropriate for the data they contain. 

{{< pagebreak >}}

## 2. To start tidying the data, focus first on the columns whose names appear to be year-month combinations (in YYYYMM format -- e.g., "202202" is Feb. 2022). Use `pivot_longer` to transform the data frame, and then create two new columns: `year`, containing the year of the observation, and `month`, containing the month.  Assign the result to a new object named `access_long`. Print the data frame `access_long`.
<!-- Tip: Pay attention to column types after using pivot_longer. Take that into account when you create `year` and `month`.-->

```{r echo = TRUE}
access_long <- access |>
  pivot_longer(
    cols = matches("^[0-9]{6}$"),
    names_to = "year_month",
    values_to = "connections"
  ) |>
  mutate(
    year = as.integer(substr(year_month, 1, 4)),
    month = as.integer(substr(year_month, 5, 6))
  )

access_long |>
  select(state, provider, remote_area, year, month, connections) |>
  slice_head(n = 15) |>
  kable(digits = 0, col.names = 
  c("State", "Provider", "Remote Area", "Year", "Month", "Connections"))
```


{{< pagebreak >}}

## 3. We'll ignore the distinction between area types (rural, suburban and urban), so aggregate the data frame `access_long` up to the `state`-`provider`-`remote_area`-`year`-`month` level by grouping and calculating the total number of connections (watch out for missing data!). Ungroup the data frame after summarizing. You do not need to retain `year_month`. Assign the resulting data frame to `access_aggreg` and print it.

``` {r echo = TRUE}
access_aggreg <- access_long |>
  group_by(state, provider, remote_area, year, month) |>
  summarize(connections = sum(connections, na.rm = TRUE), .groups = "drop")

access_aggreg |>
  slice_head(n = 15) |>
  kable(digits = 0, col.names = 
  c("State", "Provider", "Remote Area", "Year", "Month", "Connections"))
```


{{< pagebreak >}}

## 4. Finish tidying this data set by using `pivot_wider` so that `access_aggreg` shows for any given state, year, and month: (i) the number of Starlink connections in remote areas; (ii) Starlink connections in non-remote areas; (iii) connections to other providers in remote areas; and (iv) connections to other providers in non-remote areas. Assign the resulting data frame to `access_wide` and print it.

## Note the new columns created have non-intuitive names. Use `rename` to give them names you think are intuitive for you and anyone who might look at your code.

``` {r echo = TRUE}
access_wide <- access_aggreg |>
  pivot_wider(
    names_from = c(provider, remote_area),
    values_from = connections,
    values_fill = 0
  ) |>
  rename(
    `Starlink–R` = `Starlink_TRUE`,
    `Starlink–NR` = `Starlink_FALSE`,
    `Providers–R` = `Other_TRUE`,
    `Providers-NR` = `Other_FALSE`
  )

access_wide |>
  slice_head(n = 10) |>
  kable(digits = 0, col.names = 
  c("State", "Year", "Month", "Starlink–R", 
  "Starlink–NR", "Providers–R", "Providers-NR"))
```


{{< pagebreak >}}

## 5. We now have the number of connections of each type by provider in each state at any given year and month. However, we still need to find out which states are located in the Amazon area.

## Import `brazil_regions.csv` and assign it to a new object named `regions`. The Brazilian Amazon is mostly contained in the North region, so *later* we'll want to single out states that are located there. With that in mind, is this data frame tidy? If not, why is that a problem, given what we want to do with this data?
<!-- Tip: The level of observation here is states.-->

``` {r echo = TRUE}
regions <- read_csv("brazil_regions.csv")

regions
```

No, the data frame is not tidy, because it has regions as rows and states as columns, 
This makes the process to filter for specific regions or linking it with other datasets that have states as observations making it very hard to manipulate the data. 

{{< pagebreak >}}

## 6. Use `pivot_longer` to tidy up `regions` and assign it to `states`. Print the resulting data frame. Then `filter` for rows in `states` corresponding to the North region, `pull` the states' names stored in `state`, and assign it to a new object named `north_states`. What are these states?
<!-- Less code scaffolding this time! -->

``` {r echo = TRUE}
states <- regions |>
  pivot_longer(
    cols = -region,
    names_to = "state",
    values_to = "in_region"
  )


states |>
  slice_head(n = 15) |>
  kable(digits = 0, col.names = 
  c("Region", "State", "In Region"))

north_states <- states |>
  filter(region == "North", in_region == 1) |>
  pull(state)

north_states
```

The states located in the North region are: `r paste(north_states, collapse = ", ")`.


{{< pagebreak >}}

## 7. Let's go back to the internet data. Filter `access_wide` so that only North states remain in the data frame, and assign the resulting data frame to `access_tidy`. When was Starlink first introduced in each state? You can present the answer to this question in a small data frame with 7 rows.
<!-- Tip: You can use the syntax `%in%` in conjunction with `filter` to identify the rows where `state` takes on a value contained in `north_states`. -->

``` {r echo = TRUE}
access_tidy <- access_wide |>
  filter(state %in% north_states)

starlink_intro <- access_tidy |>
  filter(`Starlink–R` > 0 | `Starlink–NR` > 0) |>
  arrange(state, year, month) |>
  group_by(state) |>
  slice_head(n = 1) |>
  select(state, year, month)

starlink_intro |>
  kable(digits = 0, col.names = 
  c("State", "Year", "Month"))
```


{{< pagebreak >}}

## 8. Using only 2024 data, and separately for each state, calculate Starlink's share of remote connections as one column and the share of non-remote connections as another column. Would you say Starlink's entry in the Brazilian internet market is having a larger impact in remote or in non-remote areas of the Amazon? Recalling what you read in the introduction, is this result consistent with SpaceX's expectations for Starlink?
<!-- Tip: First, calculate the fraction of connections in remote areas that are provided by Starlink in each month (in 2024). Then, calculate the same fraction for non-remote areas. Finally, use `summarize` to take the average of those monthly shares to collapse the data to state-level averages for the year 2024.You should be able to use the resulting data frame to answer the final part of the question. -->

``` {r echo = TRUE}
shares_2024 <- access_tidy |>
  filter(year == 2024) |>
  mutate(
    remote_share = `Starlink–R` / (`Starlink–R` + `Providers–R`),
    nonremote_share = `Starlink–NR` / (`Starlink–NR` + `Providers-NR`)
  ) |>
  group_by(state) |>
  summarize(
    avg_remote_share = mean(remote_share, na.rm = TRUE),
    avg_nonremote_share = mean(nonremote_share, na.rm = TRUE),
    .groups = "drop"
  )

shares_2024 |>
  kable(digits = 3, col.names = 
  c("State", "Avg Remote Share", "Avg Non-Remote Share"))
```

We see that Starlink's entry in the Brazilian internet market is having a larger impact in remote areas of the Amazon compared to non-remote areas. This result is shows the expectations for SpaceX's Starlink, as the service was aimed at serving remote areas over non-remote areas. 