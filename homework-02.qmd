---
#########################################################
# Steps to complete this homework:
#   1. Add your name to the author field of the yaml header
#   2. Fill in the code chunks and use inline code to answer the questions 
#   3. Click on "Render" directly above to render output (or Ctrl/Cmd-Shift-K)
#   4. Repeat steps 2-3 until you are satisfied with the final product
#   5. Download the resulting file homework-02.pdf
#   6. Upload homework-02.pdf to canvas
#########################################################
title: "Homework (answer) - Week 2"
author: "Vikram Viswanath"
date: today
format: pdf
urlcolor: blue
---

```{r setup, include = FALSE}
library(nycflights13)
library(tidyverse)
library(knitr)
library(kableExtra)

```

## Preface

The goal of this assignment is to help you gain familiarity with data frames -- think "spreadsheets" -- and how to use **dplyr** functions to transform data. In this homework we are providing some code snippets to serve as "scaffolding" to help guide you through each step. As always, please come to office hours and reach out to your teaching staff if you have any questions.

***NOTE:*** While the assignment may look long, we have already written most of the code for you in the form of "scaffolded" code that provides functions that need to be completed. In some cases you need to replace the argument `FALSE` with the correct argument. Read the questions and code comments carefully to determine what you need to fill in. Please also complete any text answers that end in ellipses (...).

We will work with the data table `flights` provided in the package **nycflights13** (details [here](https://github.com/tidyverse/nycflights13)). The data table includes all domestic flights that departed NYC in 2013.

``` {r}
# let's take a look at the data
head(flights) # print the first six lines to fit on one page
```

<!--- Please leave the code above unchanged. Questions start from here. --->

I used the knitr and kableExtra libraries to improve how my results are displayed in the report. The knitr package provides the kable() function, which lets me convert data frames or tibbles into clean outputs as tables that you see generated in this pdf. 

{{< pagebreak >}}

## 1. In this data set, `arr_delay` is a variable that records the arrival delays in minutes. Negative times represent early arrivals. Use dplyr::filter to find: (1) the flights that arrived more than two hours late, and (2) the flights that arrived earlier than scheduled. What is the proportion of flights that arrived more than two hours late? What is the proportion of flights that arrived earlier than scheduled time?
<!-- Tip: Flights that arrived two hours late are those whose arrival delay is larger than 120 minutes. Flights that arrived earlier are those whose arrival delay is negative. -->
```{r echo = TRUE}

# Use filter to find and count flights that arrived more than two hours late
two_hour_late <- flights |>
  filter(arr_delay > 120) |>
  count(name = "n")
# Use filter to find and count flights that arrived earlier than scheduled
early_arr <- flights |>
  filter(arr_delay < 0) |>
  count(name = "n")
# Count the total number of flights
total <- flights |> count(name = "n")


```
A proportion of `r round(two_hour_late/total, 2)` of the flights arrived more than two hours late. A proportion of `r round(early_arr/total, 2)` of the flights arrived earlier than scheduled time.


{{< pagebreak >}}

## 2. How many flights have a missing `dep_time`? Look at the other variables that are also missing. What might these rows represent?
<!-- Tip: is.na() can help you find the missing values. Try to combine dplyr::filter with is.na(). The function count() will then count up the number of rows that meet that condition. -->
``` {r echo = TRUE}
flights |>
  filter(is.na(dep_time)) |>
  count(name = "n") |>
  kable(digits = 0, col.names = c("Rows with Missing dep_time"))
```
These rows probably represent **canceled flights**, since they have no recorded departure, arrival, or air times.


{{< pagebreak >}}

## 3. Use two different methods to select variables of `dep_time`, `sched_dep_time`, `dep_delay`, `arr_time`, `sched_arr_time`, `arr_delay`. Put `arr_delay` in the first column.
<!-- Tip: Use dplyr::select to select variables. Here are a few options: 
(1) List variable names that you want to choose;
(2) Use dplyr::contains to choose variables that contain a certain string; 
(3) Use dplyr::starts_with or dplyr::ends_with to choose variables that start with or end with certain strings;
(4) Use column numbers to index variables.
You can also use dplyr::relocate to reorder columns.
-->
``` {r echo = TRUE}
# Method 1: Use select() with column names directly
flights |>
  select(arr_delay, dep_time, sched_dep_time, dep_delay, arr_time, sched_arr_time) |>
  head(10) |>
  kable(digits = 0, col.names = 
  c("arr_delay","dep_time","sched_dep_time","dep_delay","arr_time","sched_arr_time"))


# Method 2: : Use select() with tidyselect helpers

flights |>
  select(arr_delay, any_of(c("dep_time","sched_dep_time",
  "dep_delay","arr_time","sched_arr_time"))) |>
  head(10) |>
  kable(digits = 0, col.names = c("arr_delay","dep_time","sched_dep_time",
  "dep_delay","arr_time","sched_arr_time"))

```


{{< pagebreak >}}

## 4a. Use dplyr::arrange to sort flights by arrival delays in descending order and print the result.
``` {r echo = TRUE}
# sort flights by arrival delays in descending order
flights |>
  arrange(desc(arr_delay)) |>
  head(6) |>
  select(year, month, day, dep_time, arr_time, 
  arr_delay, carrier, flight, dest) |>
  kable(digits = 0) |>
  kable_styling(font_size = 8)
```


## 4b. Use dplyr::slice_max to get the row with the largest arrival delay (we have already done this for you), and then use dplyr::pull to extract the value of that arrival delay. How long was the worst arrival delay?
<!-- Tip: The function pull() below allows us to get the value of the worst delay time as a number on its own (technically a numeric vector of length 1) rather than as a data frame. We just need to tell pull() the name of the column we want to pull out of the data frame. This facilitates presenting the number in text using inline code as we did below. -->
``` {r echo = TRUE}
# assign the longest arrival delay to worst_delay
worst_delay <- flights |>
  slice_max(arr_delay) |> # "slice" the row with the max value of arr_delay
  pull(arr_delay) # fill in this function with your code
```
The worst arrival delay was `r worst_delay` minutes.


{{< pagebreak >}}

## 5. Select `air_time` and `distance`. Generate a new varible `speed` that is calculated as `distance` divided by `air_time` (in miles/min). Then create a variable `mph` that contains speed in miles/hour.
``` {r echo = TRUE}

flights |>
  select(air_time, distance) |>
  mutate(
    speed = distance / air_time,
    mph   = speed * 60
  ) |>
  slice_head(n = 20) |>
  kable(digits = 2, col.names = c("Air Time (min)", 
  "Distance (miles)", "Speed (mi/min)", "Speed (mph)"))

```


{{< pagebreak >}}

## 6a. Calculate the average arrival delay by carrier.
<!-- Tip: Combine dplyr::group_by and dplyr::summarize to find the average arrival delay by carrier. Be careful! There are missing values in arr_delay. You want to ignore these missing values when calculating the mean. To do so, you can use mean(_____, na.rm = TRUE). 
Note: dplyr::summarize and dplyr::summarise are synonyms, so you can use whichever you are most comfortable with.-->
``` {r echo = TRUE}
flights |>
  group_by(carrier) |> 
  summarize(avg_arr_delay = mean(arr_delay, na.rm = TRUE)) |> 
  kable(
    digits = 2,
    col.names = c("Carrier", "Avg. Arrival Delay (min)")
  )
```

## 6b. Which carrier has the longest average delay? Filter the row that corresponds to that carrier out of the data frame from part a.
<!-- Tip: As we saw in question 4, we can use dplyr::slice_max(X) to filter the row that contains the maximum value of a variable X. -->
``` {r echo = TRUE}
flights |>
  group_by(carrier) |> # fill in this function with your code
  summarize(avg_arr_delay = mean(arr_delay, na.rm = TRUE)) |> 
  slice_max(avg_arr_delay) |>  # replace FALSE with your code
  kable(
    digits = 2,
    col.names = c("Carrier", "Avg. Arrival Delay (min)")
  )
```


{{< pagebreak >}}

## 7. Arriving early is better than arriving late. Based on the data, what hours of the day are on average better for flying if you want to avoid arrival delays, based on the scheduled departure hour (`hour`)?
<!-- Tip: Compute the average delay for each hour, and sort the data according to average delay (with the shortest delays on top and longest delays at the bottom). Print the result, and then finish the sentence below with a summary of which hours are best for avoiding delays (on average). -->
``` {r echo = TRUE}
# write your code here

best_hours <- flights |>
  group_by(hour) |>
  summarize(
    avg_arr_delay = mean(arr_delay, na.rm = TRUE),
    n = n()
  ) |>
  arrange(avg_arr_delay)

best_hours |>
  kable(
    digits = 2,
    col.names = c("Hour", "Avg. Arrival Delay (min)", "Number of Flights")
  )

```
The best time to fly to avoid delays is typically during the early morning hours. Based on the data, the hours with the lowest average arrival delays are `r paste(best_hours$hour[1:3], collapse = ", ")`.
